<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-ietf-oauth-json-web-token-11">

  <front>
    <title>JSON Web Token (JWT)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>
      <address>
	<email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute</organization>
      <address>
	<email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <date day="29" month="July" year="2013" />

    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>Assertion</keyword>
    <keyword>Claim</keyword>
    <keyword>Security Token</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <keyword>JSON</keyword>
    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>JSON Object Signing and Encryption</keyword>
    <keyword>JOSE</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>JSON Web Key</keyword>
    <keyword>JWK</keyword>
    <keyword>JSON Web Algorithms</keyword>
    <keyword>JWA</keyword>

    <abstract>
      <t>
	JSON Web Token (JWT) is a compact URL-safe means of representing claims to be
	transferred between two parties.  The claims in a JWT are
	encoded as a JavaScript Object Notation (JSON) object that is
	used as the payload of a JSON Web Signature (JWS) structure
	or as the plaintext of a JSON Web Encryption (JWE) structure,
	enabling the claims to be digitally signed or MACed and/or encrypted.
      </t>
      <t>
        The suggested pronunciation of JWT is the same as the English
        word "jot".
      </t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
	JSON Web Token (JWT) is a compact claims representation format intended for
	space constrained environments such as HTTP Authorization headers
	and URI query parameters.
	JWTs encode claims to be transmitted as a
	JavaScript Object Notation (JSON) <xref target="RFC4627"/> object that is
	used as the payload of a JSON Web Signature (JWS) <xref target="JWS"/> structure
	or as the plaintext of a JSON Web Encryption (JWE) <xref target="JWE"/> structure,
	enabling the claims to be digitally signed or MACed and/or encrypted.
	JWTs are always represented using the JWS Compact Serialization
	or the JWE Compact Serialization.
      </t>
      <t>
        The suggested pronunciation of JWT is the same as the English
        word "jot".
      </t>

      <section title="Notational Conventions" anchor="NotationalConventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
          and "OPTIONAL" in this document are to be interpreted as
          described in
	  Key words for use in RFCs to Indicate Requirement Levels <xref target='RFC2119' />.
        </t>
      </section>

    </section>

    <section title="Terminology" anchor="Terminology">
      <t>
	<list style="hanging">

          <t hangText="JSON Web Token (JWT)">
	    A string representing a set of claims as a JSON object that is
	    encoded in a JWS or JWE,
	    enabling the claims to be digitally signed or MACed and/or encrypted.
	  </t>

          <t hangText="Base64url Encoding">
	    The URL- and filename-safe Base64 encoding
	    described in <xref target="RFC4648">RFC 4648</xref>,
	    Section 5, with the (non URL-safe) '=' padding characters
	    omitted, as permitted by Section 3.2.  (See Appendix C of
	    <xref target="JWS" /> for notes on implementing base64url
	    encoding without padding.)
	  </t>

 	  <t hangText="JSON Text Object">
	    A UTF-8 <xref target="RFC3629"/>
	    encoded text string representing a JSON object;
	    the syntax of JSON objects is defined in
	    Section 2.2 of <xref target="RFC4627"/>.
	  </t>

          <t hangText="JWT Header">
	    A JSON Text Object that
	    describes the cryptographic operations applied to the JWT.
	    When the JWT is digitally signed or MACed, the JWT Header is a JWS Header.
	    When the JWT is encrypted, the JWT Header is a JWE Header.
	  </t>

	  <t hangText="Header Parameter Name">
	    The name of a member of the JWT Header.
	  </t>
	  <t hangText="Header Parameter Value">
	    The value of a member of the JWT Header.
	  </t>

          <t hangText="JWT Claims Set">
	    A JSON Text Object that
	    contains the Claims conveyed by the JWT.
	  </t>

	  <t hangText="Claim">
	    A piece of information asserted about a subject.
	    A Claim is represented as a name/value pair
	    consisting of a Claim Name and a Claim Value.
	  </t>

	  <t hangText="Claim Name">
	    The name portion of a Claim representation.
	    A Claim Name is always a string.
	  </t>
	  <t hangText="Claim Value">
	    The value portion of a Claim representation.
	    A Claim Value can be any JSON value.
	  </t>

          <t hangText="Encoded JWT Header">
	    Base64url encoding of the JWT Header.
	  </t>

	  <t hangText="Nested JWT">
	    A JWT in which nested signing and/or encryption are employed.
	    In nested JWTs, a JWT is used as the payload or plaintext value
	    of an enclosing JWS or JWE structure, respectively.
	  </t>

	  <t hangText="Plaintext JWT">
	    A JWT whose Claims are not integrity protected or encrypted.
	  </t>

	  <t hangText="Collision Resistant Namespace">
	    A namespace that allows names to be allocated in a manner
	    such that they are highly unlikely to collide with other names.
	    For instance, collision resistance can be achieved through
	    administrative delegation of portions of the namespace or
	    through use of collision-resistant name allocation functions.
	    Examples of Collision Resistant Namespaces include:
	    Domain Names,
	    Object Identifiers (OIDs) as defined in the ITU-T X.660
	    and X.670 Recommendation series, and
	    Universally Unique IDentifiers (UUIDs)
	    <xref target="RFC4122"/>.
	    When using an administratively delegated namespace,
	    the definer of a name needs to take
	    reasonable precautions to ensure they are in control of
	    the portion of the namespace they use to define the name.
	  </t>

	  <t hangText="StringOrURI">
	    A JSON string value, with the additional requirement that
	    while arbitrary string values MAY be used, any value
	    containing a ":" character MUST be a URI
	    <xref target="RFC3986"/>.
	    StringOrURI values are compared as case-sensitive strings
	    with no transformations or canonicalizations applied.
	  </t>

	  <t hangText="IntDate">
	    A JSON numeric value representing the number of seconds
	    from 1970-01-01T0:0:0Z UTC until the specified UTC date/time.
	    See <xref target="RFC3339">RFC 3339</xref> for details
	    regarding date/times in general and UTC in particular.
	  </t>

        </list>
      </t>
    </section>

    <section title="JSON Web Token (JWT) Overview" anchor="Overview">

      <t>
	JWTs represent a set of claims as a JSON object that is
	encoded in a JWS and/or JWE structure.
	This JSON object is the  JWT Claims Set.
	As per <xref target="RFC4627">RFC 4627</xref>
	Section 2.2, the JSON object consists of zero or more
	name/value pairs (or members), where the names are strings and
	the values are arbitrary JSON values.
	These members are the claims represented by the JWT.
      </t>
      <t>
	The member names within the JWT Claims Set are
	referred to as Claim Names.  The
	corresponding values are referred to as Claim Values.
      </t>
      <t>
	The contents of the JWT Header describe the cryptographic
	operations applied to the JWT Claims Set.
	If the JWT Header is a JWS Header, the JWT is represented as a JWS,
	and the claims are digitally signed or MACed,
	with the JWT Claims Set being the JWS Payload.
	If the JWT Header is a JWE Header, the JWT is represented as a JWE,
	and the claims are encrypted,
	with the JWT Claims Set being the input Plaintext.
	A JWT may be enclosed in another JWE or JWS structure
	to create a Nested JWT,
	enabling nested signing and encryption to be performed.
      </t>
      <t>
	A JWT is represented as a sequence of URL-safe parts
	separated by period ('.') characters.
	Each part contains a base64url encoded value.
	The number of parts in the JWT is dependent upon
	the representation of the resulting JWS or JWE
	object using the JWS Compact Serialization
	or the JWE Compact Serialization.
      </t>

      <section title="Example JWT" anchor="ExampleJWT">

	<t>
	  The following example JWT Header declares that the
	  encoded object is a JSON Web Token (JWT) and the JWT is
	  MACed using the HMAC SHA-256 algorithm:
	</t>

	<figure><artwork><![CDATA[
  {"typ":"JWT",
   "alg":"HS256"}
]]></artwork></figure>

	<t>
	  Base64url encoding the octets of the UTF-8 representation of
	  the JWT Header yields this Encoded JWS Header value,
	  which is used as the Encoded JWT Header:
	</t>

	<figure><artwork><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
]]></artwork></figure>

	<t>
	  The following is an example of a JWT Claims Set:
	</t>

	<figure><artwork><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork></figure>

	<t>
	  The following octet sequence, which is the UTF-8 representation
	  of the JWT Claims Set above, is the JWS Payload:
	</t>
	<t>

[123, 34, 105, 115, 115, 34, 58, 34, 106, 111, 101, 34, 44, 13, 10, 32, 34, 101, 120, 112, 34, 58, 49, 51, 48, 48, 56, 49, 57, 51, 56, 48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97, 109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111, 111, 116, 34, 58, 116, 114, 117, 101, 125]

	</t>

	<t>
	  Base64url encoding the JWS Payload yields this Encoded JWS Payload
	  (with line breaks for display purposes only):
	</t>

	<figure><artwork><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly
  9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork></figure>

	<t>
	  Signing the Encoded JWS Header and Encoded JWS Payload with
	  the HMAC SHA-256 algorithm and base64url encoding the
	  signature in the manner specified in <xref target="JWS" />,
	  yields this Encoded JWS Signature:
	</t>

	<figure><artwork><![CDATA[
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork></figure>

	<t>
	  Concatenating these parts in this order
	  with period ('.') characters between the
	  parts yields this complete JWT (with line breaks for
	  display purposes only):
	</t>

	<figure><artwork><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork></figure>

	<t>
	  This computation is illustrated in more detail in
	  Appendix A.1 of <xref target="JWS" />.
	  See <xref target="EncryptedJWTExample"/> for an example of
	  an encrypted JWT.
	</t>

      </section>

    </section>

    <section title="JWT Claims" anchor="Claims">

      <t>
	The JWT Claims Set represents a JSON object whose members
	are the claims conveyed by the JWT.
	The Claim Names within a JWT Claims Set MUST be unique;
	recipients MUST either reject JWTs with duplicate Claim Names
	or use a JSON parser that returns only the lexically last duplicate member name,
	as specified in Section 15.12 (The JSON Object) of
	ECMAScript 5.1 <xref target="ECMAScript"/>.
      </t>
      <t>
	The set of claims that a
	JWT must contain to be considered valid is context-dependent
	and is outside the scope of this specification.
	Specific applications of JWTs will require implementations
	to understand and process some claims in particular ways.
	However, in the absence of such requirements, all claims
	that are not understood by implementations SHOULD be ignored.
      </t>
      <t>
        There are three classes of JWT Claim Names: Reserved Claim
        Names, Public Claim Names, and Private Claim Names.
      </t>

      <section title="Reserved Claim Names" anchor="ReservedClaimName">
	<t>
	  The following Claim Names are reserved. None of the claims
	  defined below are intended to be mandatory to use, but
	  rather, provide a starting point for a set of useful,
	  interoperable claims.  All the names are short because a
	  core goal of JWTs is for the representation to be compact.
	  Additional reserved Claim Names can be defined via the
	  IANA JSON Web Token Claims registry <xref target="JWTClaimsReg" />.  
	</t>

	<section title='"iss" (Issuer) Claim' anchor="issDef">
	  <t>
	    The <spanx style="verb">iss</spanx> (issuer) claim
	    identifies the principal that issued the JWT.  The
	    processing of this claim is generally application
	    specific.
	    The <spanx style="verb">iss</spanx> value is a case sensitive string
	    containing a StringOrURI value.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"sub" (Subject) Claim' anchor="subDef">
	  <t>
	    The <spanx style="verb">sub</spanx> (subject) claim
	    identifies the principal that is the subject of the JWT.
	    The Claims in a JWT are normally statements about the subject.
	    The processing of this claim is generally application specific.
	    The <spanx style="verb">sub</spanx> value is a case sensitive string
	    containing a StringOrURI value.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"aud" (Audience) Claim' anchor="audDef">
	  <t>
	    The <spanx style="verb">aud</spanx> (audience) claim
	    identifies the audiences that the JWT is intended for.
	    Each principal intended to process the JWT MUST identify itself
	    with a value in audience claim. If the principal
	    processing the claim does not identify itself with a
	    value in the <spanx style="verb">aud</spanx> claim,
	    then the JWT MUST be rejected.
	    In the general case, 
	    the <spanx style="verb">aud</spanx> value is an array of
	    case sensitive strings, each containing a StringOrURI value.
	    In the special case when the JWT has one audience,
	    the <spanx style="verb">aud</spanx> value MAY be a single
	    case sensitive string containing a StringOrURI value.
	    The interpretation of audience values is generally application specific.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"exp" (Expiration Time) Claim' anchor="expDef">
	  <t>
	    The <spanx style="verb">exp</spanx> (expiration time)
	    claim identifies the expiration time on or after which the
	    JWT MUST NOT be accepted for processing.  The processing
	    of the <spanx style="verb">exp</spanx> claim requires that
	    the current date/time MUST be before the expiration
	    date/time listed in the <spanx style="verb">exp</spanx>
	    claim. Implementers MAY provide for some small leeway,
	    usually no more than a few minutes, to account for clock skew.
	    Its value MUST be a number containing an IntDate value.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"nbf" (Not Before) Claim' anchor="nbfDef">
	  <t>
	    The <spanx style="verb">nbf</spanx> (not before) claim
	    identifies the time before which the JWT MUST NOT be
	    accepted for processing.  The processing of the <spanx
	    style="verb">nbf</spanx> claim requires that the current
	    date/time MUST be after or equal to the not-before
	    date/time listed in the <spanx style="verb">nbf</spanx>
	    claim. Implementers MAY provide for some small leeway,
	    usually no more than a few minutes, to account for clock skew.
	    Its value MUST be a number containing an IntDate value.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"iat" (Issued At) Claim' anchor="iatDef">
	  <t>
	    The <spanx style="verb">iat</spanx> (issued at) claim
	    identifies the time at which the JWT was issued.  This
	    claim can be used to determine the age of the JWT.
	    Its value MUST be a number containing an IntDate value.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"jti" (JWT ID) Claim' anchor="jtiDef">
	  <t>
	    The <spanx style="verb">jti</spanx> (JWT ID) claim
	    provides a unique identifier for the JWT.  The identifier
	    value MUST be assigned in a manner that ensures that there
	    is a negligible probability that the same value will be
	    accidentally assigned to a different data object.  The
	    <spanx style="verb">jti</spanx> claim can be used to
	    prevent the JWT from being replayed.
	    The <spanx style="verb">jti</spanx> value is a case sensitive string.
	    Use of this claim is OPTIONAL.
	  </t>
	</section>

	<section title='"typ" (Type) Claim' anchor="typDef">
	  <t>
	    The <spanx style="verb">typ</spanx> (type) claim MAY be used
	    to declare a type for the contents of this JWT Claims Set
	    in an application-specific manner
	    in contexts where this is useful to the application.
	    The <spanx style="verb">typ</spanx> value is a case sensitive string.
	    Use of this claim is OPTIONAL.
	  </t>
	  <t>
	    The values used for the <spanx style="verb">typ</spanx>
	    claim come from the same value space as the
	    <spanx style="verb">typ</spanx> header parameter,
	    with the same rules applying.
	  </t>
	</section>

      </section>

      <section title="Public Claim Names" anchor="PublicClaimName">

        <t>
	  Claim Names can be defined at will by those using
	  JWTs. However, in order to prevent collisions, any new
	  Claim Name SHOULD either be registered in the IANA
	  JSON Web Token Claims registry <xref target="JWTClaimsReg" />
	  or be a Public Name: 
	  a value that contains a Collision Resistant Namespace.
	  In each case, the definer of the name
	  or value needs to take reasonable precautions to make sure they
	  are in control of the part of the namespace they use to
	  define the Claim Name.
	</t>
      </section>

      <section title="Private Claim Names" anchor="PrivateClaimName">

         <t>
	   A producer and consumer of a JWT MAY agree to use Claim Names
	   that are Private Names:  names that are
	   not Reserved Names <xref target="ReservedClaimName"></xref>
	   or Public Names <xref target="PublicClaimName"></xref>.
	   Unlike Public Names, Private Names are subject to collision and
	   should be used with caution.
	 </t>

      </section>
    </section>

    <section title="JWT Header" anchor="Header">

      <t>
	The members of the JSON object represented by the JWT Header
	describe the cryptographic operations applied to the JWT and
	optionally, additional properties of the JWT.
	The member names within the JWT Header are
	referred to as Header Parameter Names.
	These names MUST be unique;
	recipients MUST either reject JWTs with duplicate Header Parameter Names
	or use a JSON parser that returns only the lexically last duplicate member name,
	as specified in Section 15.12 (The JSON Object) of
	ECMAScript 5.1 <xref target="ECMAScript"/>.
	The corresponding values are referred to as Header Parameter Values.
      </t>
      <t>
	JWS Header Parameters are defined by <xref target="JWS" />.
	JWE Header Parameters are defined by <xref target="JWE" />.
	This specification further specifies the use of the following
	header parameter in both the cases where the JWT is a JWS and
	where it is a JWE.
      </t>

      <section title='"typ" (Type) Header Parameter' anchor="typHdrDef">
	<t>
	  The <spanx style="verb">typ</spanx> (type) header parameter
	  MAY be used to declare the type of this JWT
	  in an application-specific manner
	  in contexts where this is useful to the application.
	  This parameter has no effect upon the JWT processing.
	  If present, it is RECOMMENDED that its value be either
	  <spanx style="verb">JWT</spanx> or
	  <spanx style="verb">urn:ietf:params:oauth:token-type:jwt</spanx>
	  to indicate that this object is a JWT.
	  The <spanx style="verb">typ</spanx> value is a case sensitive string.
	  Use of this header parameter is OPTIONAL.
	</t>
      </section>

      <section title='"cty" (Content Type) Header Parameter' anchor="ctyHdrDef">
	<t>
	  The <spanx style="verb">cty</spanx> (content type) header parameter
	  is used to declare structural information about the JWT.
	  Its value MUST be a string.
	</t>
	<t>
	  In the normal case where nested signing or encryption
	  operations are not employed, the use of this header
	  parameter is NOT RECOMMENDED.
	  In the case that nested signing or encryption is
	  employed, the use of this header parameter is REQUIRED; in
	  this case, the value MUST be <spanx style="verb">JWT</spanx>, to indicate that
	  a Nested JWT is carried in this JWT.
	  See <xref target="NestedJWTExample"/> for an example of a Nested JWT.
	</t>
	<t>
	  The values used for the <spanx style="verb">cty</spanx>
	  header parameter come from the same value space as the
	  <spanx style="verb">typ</spanx> header parameter,
	  with the same rules applying.
	</t>
      </section>

      <section title="Replicating Claims as Header Parameters" anchor="ClaimsAsHeaders">
	<t>
	  In some applications using encrypted JWTs, it is useful to
	  have an unencrypted representation of some Claims.
	  This might be used, for instance, in application processing rules
	  to determine whether and how to process the JWT before
	  it is decrypted.
	</t>
	<t>
	  This specification allows Claims present in the JWT Claims Set
	  to be replicated as Header Parameters in a JWT that is a JWE,
	  as needed by the application.
	  If such replicated Claims are present, the application receiving them
	  SHOULD verify that their values are identical.
	  It is the responsibility of the application to ensure that
	  only claims that are safe to be transmitted in an unencrypted manner
	  are replicated as Header Parameter values in the JWT.
	</t>
	<t>
	  This specification reserves the
	  <spanx style="verb">iss</spanx> (issuer),
	  <spanx style="verb">sub</spanx> (subject), and
	  <spanx style="verb">aud</spanx> (audience)
	  Header Parameter Names for the purpose of
	  providing unencrypted replicas of these Claims in encrypted JWTs
	  for applications that need them.
	  Other specifications MAY similarly reserve other names
	  that are reserved Claim Names as Header Parameter Names, as needed.
	</t>
      </section>

    </section>

    <section title="Plaintext JWTs" anchor="Plaintext">

      <t>
	To support use cases where the JWT content is secured by a
	means other than a signature and/or encryption contained
	within the JWT (such as a signature on a data structure
	containing the JWT), JWTs MAY also be created without a
	signature or encryption.  A plaintext JWT is a JWS using the
	<spanx style="verb">none</spanx> JWS <spanx
	style="verb">alg</spanx> header parameter value defined in
	JSON Web Algorithms (JWA) <xref target="JWA" />; it is a JWS
	with the empty string for its JWS Signature value.
      </t>

      <section title="Example Plaintext JWT" anchor="ExamplePlaintextJWT">

	<t>
	  The following example JWT Header declares that the
	  encoded object is a Plaintext JWT:
	</t>

	<figure><artwork><![CDATA[
  {"alg":"none"}
]]></artwork></figure>

	<t>
	  Base64url encoding the octets of the UTF-8 representation of
	  the JWT Header yields this Encoded JWT Header:
	</t>

	<figure><artwork><![CDATA[
  eyJhbGciOiJub25lIn0
]]></artwork></figure>

	<t>
	  The following is an example of a JWT Claims Set:
	</t>

	<figure><artwork><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork></figure>

	<t>
	  Base64url encoding the octets of the UTF-8 representation of
	  the JWT Claims Set yields this Encoded JWS Payload
	  (with line breaks for display purposes only):
	</t>

	<figure><artwork><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork></figure>

	<t>
	  The Encoded JWS Signature is the empty string.
	</t>

	<t>
	  Concatenating these parts in this order
	  with period ('.') characters between the
	  parts yields this complete JWT (with line breaks for
	  display purposes only):
	</t>

	<figure><artwork><![CDATA[
  eyJhbGciOiJub25lIn0
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
]]></artwork></figure>
      </section>

    </section>

    <section title="Rules for Creating and Validating a JWT" anchor="Validating">

      <t>
	To create a JWT, one MUST perform these steps.  The order of
	the steps is not significant in cases where there are no
	dependencies between the inputs and outputs of the steps.

        <list style="numbers">

	  <t>
	    Create a JWT Claims Set containing the desired claims.
	    Note that white space is explicitly allowed in the
	    representation and no canonicalization need be performed before
	    encoding.
	  </t>
	  <t>
	    Let the Message be the octets of the UTF-8 representation
	    of the JWT Claims Set.
	  </t>
	  <t>
	    Create a JWT Header containing the desired set of header
	    parameters.  The JWT
	    MUST conform to either the <xref target="JWS" /> or <xref
	    target="JWE" /> specifications.
	    Note that white
	    space is explicitly allowed in the representation and no
	    canonicalization need be performed before encoding.
	  </t>
          <t>
	    Base64url encode the octets of the UTF-8 representation of
	    the JWT Header.  Let this be the Encoded JWT Header.
	  </t>
	  <t>
	    Depending upon whether the JWT is a JWS or JWE,
	    there are two cases:
	    <list style='symbols'>
	      <t>
		If the JWT is a JWS, create a JWS using the JWT
		Header as the JWS Header and the Message as the JWS
		Payload; all steps specified in <xref target="JWS" />
		for creating a JWS MUST be followed.
	      </t>
	      <t>
		Else, if the JWT is a JWE, create a JWE using the
		JWT Header as the JWE Header and the Message as the
		JWE Plaintext; all steps specified in <xref
		target="JWE" /> for creating a JWE MUST be followed.
	      </t>
	    </list>
	  </t>
	  <t>
	    If a nested signing or encryption operation will be
	    performed, let the Message be the JWS or JWE, and
	    return to Step 3, using a <spanx style="verb">cty</spanx> (content type)
	    value of <spanx style="verb">JWT</spanx>
	    in the new JWT Header created in that step.
	  </t>
	  <t>
	    Otherwise, let the resulting JWT be the JWS or JWE.
	  </t>
        </list>
      </t>
      <t>
	When validating a JWT the following steps MUST be taken.  The
	order of the steps is not significant in cases where there are
	no dependencies between the inputs and outputs of the steps.
	If any of the listed steps fails then the JWT MUST be
	rejected for processing.
      </t>
      <t>
	<list style="numbers">
	  <t>
	    The JWT MUST contain at least one period ('.') character.
	  </t>
	  <t>
	    Let the Encoded JWT Header be the portion of the JWT
	    before the first period ('.') character.
	  </t>
          <t>
	    The Encoded JWT Header MUST be successfully base64url
	    decoded following the restriction given in this
	    specification that no padding characters have been used.
	  </t>
          <t>
	    The resulting JWT Header MUST be completely valid JSON syntax
	    conforming to <xref target="RFC4627">RFC 4627</xref>.
	  </t>
          <t>
	    The resulting JWT Header MUST be validated to only include
	    parameters and values whose syntax and semantics are both
	    understood and supported
	    or that are specified as being ignored when not understood.
	  </t>
	  <t>
	    Determine whether the JWT is a JWS or a JWE by
	    examining the <spanx style="verb">alg</spanx>
	    (algorithm) header value and optionally, the <spanx
	    style="verb">enc</spanx> (encryption method) header value,
	    if present.
	  </t>
	  <t>
	    Depending upon whether the JWT is a JWS or JWE,
	    there are two cases:
	    <list style='symbols'>
	      <t>
		If the JWT is a JWS, all steps specified in <xref
		target="JWS" /> for validating a JWS MUST be followed.
		Let the Message be the result of base64url decoding
		the JWS Payload.
	      </t>
	      <t>
		Else, if the JWT is a JWE, all steps specified in <xref
		target="JWE" /> for validating a JWE MUST be followed.
		Let the Message be the JWE Plaintext.
	      </t>
	    </list>
	  </t>
	  <t>
	    If the JWT Header contains a <spanx style="verb">cty</spanx> (content type)
	    value of <spanx style="verb">JWT</spanx>,
	    then the Message is a JWT that was the subject of
	    nested signing or encryption operations.  In
	    this case, return to Step 1, using the Message as the JWT.
	  </t>
	  <t>
	    Otherwise, let the JWT Claims Set be the Message.
	  </t>
	  <t>
	    The JWT Claims Set MUST be completely valid
	    JSON syntax conforming to <xref target="RFC4627">RFC
	    4627</xref>.
	  </t>
        </list>
      </t>

      <section title="String Comparison Rules" anchor="StringComparison">

	<t>
	  Processing a JWT inevitably requires comparing known strings
	  to values in JSON objects. For example, in checking what the
	  algorithm is, the Unicode string encoding
	  <spanx style="verb">alg</spanx> will be
	  checked against the member names in the JWT Header
	  to see if there is a matching Header Parameter Name.
	</t>
	<t>
	  Comparisons between JSON strings and other Unicode strings
	  MUST be performed by comparing Unicode code points without normalization
	  as specified in the String Comparison Rules in Section 5.3 of <xref target="JWS" />.
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms" anchor="Algorithms">

      <t>
	JWTs use JSON Web Signature (JWS) <xref target="JWS" /> and
	JSON Web Encryption (JWE) <xref target="JWE" /> to sign and/or
	encrypt the contents of the JWT.
      </t>
      <t>
	Of the JWA signing algorithms, only
	HMAC SHA-256
	(<spanx style="verb">HS256</spanx>) and
	<spanx style="verb">none</spanx>
	MUST be implemented by conforming JWT implementations.
	It is RECOMMENDED that implementations also support
	RSASSA-PKCS1-V1_5 with the SHA-256 hash algorithm
	(<spanx style="verb">RS256</spanx>) and
	ECDSA using the P-256 curve and the SHA-256 hash algorithm
	(<spanx style="verb">ES256</spanx>).
	Support for other algorithms and key sizes is OPTIONAL.
      </t>
      <t>
	If an implementation provides encryption capabilities,
	of the JWA encryption algorithms, only
	RSAES-PKCS1-V1_5 with 2048 bit keys
	(<spanx style="verb">RSA1_5</spanx>),
	AES Key Wrap with 128 and 256 bit keys
	(<spanx style="verb">A128KW</spanx> and <spanx style="verb">A256KW</spanx>), and
	the composite authenticated encryption algorithm using AES CBC and HMAC SHA-2
	(<spanx style="verb">A128CBC-HS256</spanx> and <spanx style="verb">A256CBC-HS512</spanx>)
	MUST be implemented by conforming implementations.
	It is RECOMMENDED that implementations also support using
	ECDH-ES to agree upon a key used to wrap the Content Encryption Key
	(<spanx style="verb">ECDH-ES+A128KW</spanx> and <spanx style="verb">ECDH-ES+A256KW</spanx>)
	and
	AES in Galois/Counter Mode (GCM) with 128 bit and 256 bit keys
	(<spanx style="verb">A128GCM</spanx> and <spanx style="verb">A256GCM</spanx>).
	Support for other algorithms and key sizes is OPTIONAL.
      </t>

    </section>

    <section title="IANA Considerations" anchor="IANA">

      <section title="JSON Web Token Claims Registry" anchor="JWTClaimsReg">
	<t>
	  This specification establishes the
	  IANA JSON Web Token Claims registry
	  for reserved JWT Claim Names.
	  The registry records the reserved Claim Name
	  and a reference to the specification that defines it.
	  This specification registers the Claim Names
	  defined in <xref target="ReservedClaimName"></xref>.
	</t>
	<t>
	  Values are registered with a Specification Required
	  <xref target="RFC5226"/> after a two-week review period on the [TBD]@ietf.org mailing
          list, on the advice of one or more Designated Experts. However, to allow for the
          allocation of values prior to publication, the Designated Expert(s) may approve
          registration once they are satisfied that such a specification will be published.
	</t>
        <t>
          Registration requests must be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for access token type: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: claims-reg-review. ]]
        </t>
        <t>
          Within the review period, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision to the review list and IANA.
          Denials should include an explanation and, if applicable, suggestions as to how to make
          the request successful.
        </t>
        <t>
          IANA must only accept registry updates from the Designated Expert(s) and should direct
          all requests for registration to the review mailing list.
        </t>

        <section title="Registration Template" anchor="ClaimsTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Claim Name:'>
                <vspace />
                The name requested (e.g., "example").
		This name is case sensitive.  Names that match other registered names
		in a case insensitive manner SHOULD NOT be accepted.
              </t>
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="ClaimsContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">iss</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="issDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">sub</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="subDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">aud</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="audDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
	    <list style='symbols'>
	      <t>
		Claim Name: <spanx style="verb">exp</spanx>
	      </t>
	      <t>
		Change Controller: IETF
	      </t>
	      <t>
		Specification Document(s): <xref target="expDef"/> of [[ this document ]]
	      </t>
	    </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">nbf</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="nbfDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">iat</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="iatDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">jti</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="jtiDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Claim Name: <spanx style="verb">typ</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="typDef"/> of [[ this document ]]
              </t>
	    </list>
          </t>
	</section>
	<?rfc subcompact="no"?>

      </section>

      <section title="Sub-Namespace Registration of urn:ietf:params:oauth:token-type:jwt" anchor="URNReg">
	<section title="Registry Contents" anchor="URNContents">
	  <t>
	    This specification registers the value
	    <spanx style='verb'>token-type:jwt</spanx> in the
	    IANA urn:ietf:params:oauth registry established in
	    <xref target="RFC6755">An IETF URN Sub-Namespace for OAuth</xref>,
	    which can be used to indicate that the content is a JWT.
	  </t>
	  <t> <?rfc subcompact="yes"?>
	  <list style='symbols'>
	    <t>URN: urn:ietf:params:oauth:token-type:jwt</t>
	    <t>Common Name: JSON Web Token (JWT) Token Type</t>
	    <t>Change Controller: IETF</t>
	    <t>Specification Document(s): [[this document]]</t>
	  </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Signature and Encryption Type Values Registration" anchor="TypReg">
	<section title="Registry Contents" anchor="TypContents">
	  <t>
	    This specification registers the <spanx style='verb'>JWT</spanx>
	    type value in the
	    IANA JSON Web Signature and Encryption Type Values registry <xref target="JWS"/>,
	    which can be used to indicate that the content is a JWT.
	  </t>
	  <t> <?rfc subcompact="yes"?>
	  <list style='symbols'>
	    <t>
	      "typ" Header Parameter Value: <spanx style='verb'>JWT</spanx>
	    </t>
	    <t>
	      Abbreviation for MIME Type: application/jwt
	    </t>
	    <t>
	      Change Controller: IETF
	    </t>
	    <t>
	      Specification Document(s): <xref target="typHdrDef"/> of [[ this document ]]
	    </t>
	  </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="Media Type Registration" anchor="MediaReg">
	<section title="Registry Contents" anchor="MediaContents">
	  <t>
	    This specification registers the <spanx
	    style="verb">application/jwt</spanx> Media Type <xref target="RFC2046"/>
	    in the MIME Media Type registry <xref target="RFC4288"/>,
	    which can be used to indicate that the content is a JWT.
	  </t>
	  <t> <?rfc subcompact="yes"?>
	  <list style="symbols">
	    <t>
	      Type Name: application
	    </t>
	    <t>
	      Subtype Name: jwt
	    </t>
	    <t>
	      Required Parameters: n/a
	    </t>
	    <t>
	      Optional Parameters: n/a
	    </t>
	    <t>
	      Encoding considerations: JWT values are encoded as a
	      series of base64url encoded values (some of which may be the
	      empty string) separated by period ('.') characters
	    </t>
	    <t>
	      Security Considerations: See the Security Considerations section of [[ this document ]]
	    </t>
	    <t>
	      Interoperability Considerations: n/a
	    </t>
	    <t>
	      Published Specification: [[ this document ]]
	    </t>
	    <t>
	      Applications that use this media type:
	      OpenID Connect, Mozilla Persona, Salesforce, Google, numerous others
	    </t>
	    <t>
	      Additional Information:
	      Magic number(s): n/a,
	      File extension(s): n/a,
	      Macintosh file type code(s): n/a
	    </t>
	    <t>
	      Person &amp; email address to contact for further information:
	      Michael B. Jones, mbj@microsoft.com
	    </t>
	    <t>
	      Intended Usage: COMMON
	    </t>
	    <t>
	      Restrictions on Usage: none
	    </t>
	    <t>
	      Author: Michael B. Jones, mbj@microsoft.com
	    </t>
	    <t>
	      Change Controller: IETF
	    </t>
	  </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="Registration of JWE Header Parameter Names" anchor="HdrReg">
	<t>
	  This specification registers specific reserved Claim Names defined in
	  <xref target="ReservedClaimName"/> in the IANA
	  JSON Web Signature and Encryption Header Parameters registry
	  <xref target="JWS" />
	  for use by Claims replicated as Header Parameters,
	  per <xref target="ClaimsAsHeaders"/>.
	</t>

        <section title="Registry Contents" anchor="HdrContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">iss</spanx>
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="issDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">sub</spanx>
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="subDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">aud</spanx>
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="audDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

    </section>

    <section title="Security Considerations" anchor="Security">
      <t>
	All of the security issues faced by any cryptographic application
	must be faced by a JWT/JWS/JWE/JWK agent.  Among these issues are protecting
	the user's private and symmetric keys, preventing various attacks, and helping the
	user avoid mistakes such as inadvertently encrypting a message for
	the wrong recipient.  The entire list of security considerations is
	beyond the scope of this document.
      </t>
      <t>
	All the security considerations in the JWS specification also
	apply to JWT, as do the JWE security considerations when
	encryption is employed.  In particular, the JWS
	JSON Security Considerations and Unicode Comparison Security Considerations
	apply equally to the JWT Claims Set in the same manner that
	they do to the JWS Header.
      </t>
      <t>
	While syntactically, the signing and encryption operations for
	Nested JWTs may be applied in any order,
	normally senders should sign the message and then encrypt the
	result (thus encrypting the signature). This prevents attacks
	in which the signature is stripped, leaving just an encrypted
	message, as well as providing privacy for the signer.
	Furthermore, signatures over encrypted text are not considered
	valid in many jurisdictions.
      </t>
      <t>
	Note that potential concerns about security issues related to
	the order of signing and encryption operations are already
	addressed by the underlying JWS and JWE specifications;
	in particular, because JWE only supports the use of
	authenticated encryption algorithms, cryptographic concerns
	about the potential need to sign after encryption that apply
	in many contexts do not apply to this specification.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2046.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4288.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6755.xml' ?>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature (JWS)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>

	  <date day="11" month="July" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-signature" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature" type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
	    <organization abbrev="RTFM">RTFM, Inc.</organization>
	    <address>
	      <email>ekr@rtfm.com</email>
	    </address>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>

	  <date day="11" month="July" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-encryption" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption" type="HTML" />
      </reference>

      <reference anchor="JWK">
        <front>
	  <title>JSON Web Key (JWK)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date day="29" month="July" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-key" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key" type="HTML" />
      </reference>

      <reference anchor="JWA">
        <front>
	  <title>JSON Web Algorithms (JWA)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date day="11" month="July" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-algorithms" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms" type="HTML" />
      </reference>

      <reference anchor="ECMAScript">
	<front>
	  <title>ECMAScript Language Specification, 5.1 Edition</title>
	  <author>
	    <organization>Ecma International</organization>
	  </author>
	  <date month="June" year="2011"/>
	</front>
	<seriesInfo name="ECMA" value="262"/>
	<format target="http://www.ecma-international.org/ecma-262/5.1/" type="HTML" />
	<format target="http://www.ecma-international.org/ecma-262/5.1/ECMA-262.pdf" type="PDF" />
      </reference>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3275.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4122.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xml11-20021015.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-c14n-20010315.xml' ?>

      <reference anchor="SWT">
        <front>
          <title>Simple Web Token (SWT)</title>

          <author fullname="Dick Hardt" initials="D." surname="Hardt"></author>

          <author fullname="Yaron Y. Goland" initials="Y.Y." surname="Goland"></author>

          <date day="4" month="November" year="2009" />
        </front>
        <seriesInfo name="Version" value="0.9.5.1" />
        <format target="http://msdn.microsoft.com/en-us/library/windowsazure/hh781551.aspx" type="HTML" />
      </reference>

      <reference anchor="MagicSignatures">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer (editor)" initials="J." surname="Panzer (editor)"></author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie"></author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz"></author>

          <date day="7" month="January" year="2011" />
        </front>
        <format target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-01.html" type="HTML" />
      </reference>

      <reference anchor="JSS">
        <front>
          <title>JSON Simple Sign</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/jss/1.0/" type="HTML" />
      </reference>

      <reference anchor="CanvasApp">
        <front>
          <title>Canvas Applications</title>

          <author fullname="Facebook" surname="Facebook"></author>

          <date year="2010" />
        </front>
        <format target="http://developers.facebook.com/docs/authentication/canvas" type="HTML" />
      </reference>

    </references>

    <section title="JWT Examples" anchor="JWTExamples">
      
      <t>
	This section contains examples of JWTs.
	For other example JWTs, see <xref target="ExamplePlaintextJWT"/> and
	Appendices A.1, A.2, and A.3 of <xref target="JWS"/>.
      </t>

      <section title="Example Encrypted JWT" anchor="EncryptedJWTExample">
	<t>
	  This example encrypts the same claims as used in <xref target="ExampleJWT"/>
	  to the recipient using RSAES-PKCS1-V1_5 and AES_128_CBC_HMAC_SHA_256.
	</t>
	<t>
	  The following example JWE Header (with line breaks for display purposes only) declares that:
	  <list style="symbols">
	    <t>
	      the Content Encryption Key is encrypted to the recipient
	      using the RSAES-PKCS1-V1_5 algorithm to produce
	      the JWE Encrypted Key and
	    </t>
	    <t>
	      the Plaintext is encrypted using the AES_128_CBC_HMAC_SHA_256
	      algorithm to produce the Ciphertext.
	    </t>
	  </list>
	</t>

	<figure><artwork><![CDATA[
  {"alg":"RSA1_5","enc":"A128CBC-HS256"}
]]></artwork></figure>

	<t>
	  Other than using the octets of the UTF-8 representation of
	  the JWT Claims Set from <xref target="ExampleJWT"/>
	  as the plaintext value, the computation of this JWT is
	  identical to the computation of the JWE in
	  Appendix A.2 of <xref target="JWE"/>,
	  including the keys used.
	</t>
	<t>
	  The final result in this example
	  (with line breaks for display purposes only) is:
	</t>
	<figure><artwork><![CDATA[
  eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.
  QR1Owv2ug2WyPBnbQrRARTeEk9kDO2w8qDcjiHnSJflSdv1iNqhWXaKH4MqAkQtM
  oNfABIPJaZm0HaA415sv3aeuBWnD8J-Ui7Ah6cWafs3ZwwFKDFUUsWHSK-IPKxLG
  TkND09XyjORj_CHAgOPJ-Sd8ONQRnJvWn_hXV1BNMHzUjPyYwEsRhDhzjAD26ima
  sOTsgruobpYGoQcXUwFDn7moXPRfDE8-NoQX7N7ZYMmpUDkR-Cx9obNGwJQ3nM52
  YCitxoQVPzjbl7WBuB7AohdBoZOdZ24WlN1lVIeh8v1K4krB8xgKvRU8kgFrEn_a
  1rZgN5TiysnmzTROF869lQ.
  AxY8DCtDaGlsbGljb3RoZQ.
  MKOle7UQrG6nSxTLX6Mqwt0orbHvAKeWnDYvpIAeZ72deHxz3roJDXQyhxx0wKaM
  HDjUEOKIwrtkHthpqEanSBNYHZgmNOV7sln1Eu9g3J8.
  fiK51VwhsxJ-siBMR-YFiA
]]></artwork></figure>
      </section>

      <section title="Example Nested JWT" anchor="NestedJWTExample">
	<t>
	  This example shows how a JWT can be used as the payload
	  of a JWE or JWS to create a Nested JWT.
	  In this case, the JWT Claims Set is first signed, and then encrypted.
	</t>
	<t>
	  The inner signed JWT is identical to the example in
	  Appendix A.2 of <xref target="JWS"/>.
	  Therefore, its computation is not repeated here.
	  This example then encrypts this inner JWT
	  to the recipient using RSAES-PKCS1-V1_5 and AES_128_CBC_HMAC_SHA_256.
	</t>
	<t>
	  The following example JWE Header (with line breaks for display purposes only)
	  declares that:
	  <list style="symbols">
	    <t>
	      the Content Encryption Key is encrypted to the recipient
	      using the RSAES-PKCS1-V1_5 algorithm to produce
	      the JWE Encrypted Key,
	    </t>
	    <t>
	      the Plaintext is encrypted using the AES_128_CBC_HMAC_SHA_256
	      algorithm to produce the Ciphertext, and
	    </t>
	    <t>
	      the Plaintext is itself a JWT.
	    </t>
	  </list>
	</t>

	<figure><artwork><![CDATA[
  {"alg":"RSA1_5","enc":"A128CBC-HS256","cty":"JWT"}
]]></artwork></figure>
	  <t>
	    Base64url encoding the octets of the UTF-8 representation of
	    the JWE Header yields this Encoded JWE Header value:
	  </t>

	  <figure><artwork><![CDATA[
  eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiY3R5IjoiSldUIn0
]]></artwork></figure>

	<t>
	  The computation of this JWT is
	  identical to the computation of the JWE in
	  Appendix A.2 of <xref target="JWE"/>,
	  other than that different
	  JWE Header,
	  Plaintext,
	  Initialization Vector, and
	  Content Encryption Key
	  values are used.
	  (The RSA key used is the same.)
	</t>
	<t>
	  The Payload used is the octets of the ASCII representation of
	  the JWT at the end of Appendix Section A.2.1 of <xref target="JWS"/>
	  (with all whitespace and line breaks removed),
	  which is a sequence of 458 octets.
	</t>
	<t>
	  The Initialization Vector value used is:
	</t>
	<t>
	  [82, 101, 100, 109, 111, 110, 100, 32, 87, 65, 32, 57, 56, 48, 53, 50]
	</t>
	<t>
	  This example uses the Content Encryption Key
	  represented in JSON Web Key <xref target="JWK" /> format below:
	</t>
	<figure><artwork><![CDATA[
  {"kty":"oct",
   "k":"GawgguFyGrWKav7AX4VKUg"
  }
]]></artwork></figure>
	<t>
	  The final result for this Nested JWT
	  (with line breaks for display purposes only) is:
	</t>
	<figure><artwork><![CDATA[
  eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiY3R5IjoiSldU
  In0.
  g_hEwksO1Ax8Qn7HoN-BVeBoa8FXe0kpyk_XdcSmxvcM5_P296JXXtoHISr_DD_M
  qewaQSH4dZOQHoUgKLeFly-9RI11TG-_Ge1bZFazBPwKC5lJ6OLANLMd0QSL4fYE
  b9ERe-epKYE3xb2jfY1AltHqBO-PM6j23Guj2yDKnFv6WO72tteVzm_2n17SBFvh
  DuR9a2nHTE67pe0XGBUS_TK7ecA-iVq5COeVdJR4U4VZGGlxRGPLRHvolVLEHx6D
  YyLpw30Ay9R6d68YCLi9FYTq3hIXPK_-dmPlOUlKvPr1GgJzRoeC9G5qCvdcHWsq
  JGTO_z3Wfo5zsqwkxruxwA.
  UmVkbW9uZCBXQSA5ODA1Mg.
  VwHERHPvCNcHHpTjkoigx3_ExK0Qc71RMEParpatm0X_qpg-w8kozSjfNIPPXiTB
  BLXR65CIPkFqz4l1Ae9w_uowKiwyi9acgVztAi-pSL8GQSXnaamh9kX1mdh3M_TT
  -FZGQFQsFhu0Z72gJKGdfGE-OE7hS1zuBD5oEUfk0Dmb0VzWEzpxxiSSBbBAzP10
  l56pPfAtrjEYw-7ygeMkwBl6Z_mLS6w6xUgKlvW6ULmkV-uLC4FUiyKECK4e3WZY
  Kw1bpgIqGYsw2v_grHjszJZ-_I5uM-9RA8ycX9KqPRp9gc6pXmoU_-27ATs9XCvr
  ZXUtK2902AUzqpeEUJYjWWxSNsS-r1TJ1I-FMJ4XyAiGrfmo9hQPcNBYxPz3GQb2
  8Y5CLSQfNgKSGt0A4isp1hBUXBHAndgtcslt7ZoQJaKe_nNJgNliWtWpJ_ebuOpE
  l8jdhehdccnRMIwAmU1n7SPkmhIl1HlSOpvcvDfhUN5wuqU955vOBvfkBOh5A11U
  zBuo2WlgZ6hYi9-e3w29bR0C2-pp3jbqxEDw3iWaf2dc5b-LnR0FEYXvI_tYk5rd
  _J9N0mg0tQ6RbpxNEMNoA9QWk5lgdPvbh9BaO195abQ.
  AVO9iT5AV4CzvDJCdhSFlQ
]]></artwork></figure>
      </section>

    </section>

    <section title="Relationship of JWTs to SAML Assertions" anchor="SAMLRelationship">
      <t>
	<xref target="OASIS.saml-core-2.0-os">SAML 2.0</xref> provides
	a standard for creating security tokens with greater expressivity
	and more security options than supported by JWTs. However, the
	cost of this flexibility and expressiveness is both size and complexity.
	SAML's use of XML <xref target="W3C.CR-xml11-20021015"/> and
	XML DSIG <xref target="RFC3275"/> contributes to the size
	of SAML assertions; its use of XML and especially
	XML Canonicalization <xref target="W3C.REC-xml-c14n-20010315"/>
	contributes to their complexity.
      </t>
      <t>
	JWTs are intended to provide a simple security token format that is
	small enough to fit into HTTP headers and query arguments in
	URIs. It does this by supporting a much simpler token model
	than SAML and using the <xref target="RFC4627">JSON</xref>
	object encoding syntax. It also supports securing tokens using
	Message Authentication Codes (MACs) and digital
	signatures using a smaller (and less flexible) format than XML
	DSIG.
      </t>
      <t>
	Therefore, while JWTs can do some of the things SAML assertions
	do, JWTs are not intended as a full replacement for SAML
	assertions, but rather as a token format to be used
	when ease of implementation or compactness are considerations.
      </t>
      <t>
	SAML Assertions are always statements made by an entity about a subject.
	JWTs are often used in the same manner, with the entity making the
	statements being represented by the <spanx style="verb">iss</spanx> (issuer) claim, and
	the subject being represented by the <spanx style="verb">sub</spanx> (subject) claim.
	However, with these claims being optional, other uses of the JWT format are also permitted.
      </t>
    </section>

    <section title="Relationship of JWTs to Simple Web Tokens (SWTs)" anchor="SWTRelationship">

      <t>
	Both JWTs and Simple Web Tokens <xref target="SWT">SWT</xref>,
	at their core, enable sets of claims to be communicated
	between applications.  For SWTs, both the claim names and
	claim values are strings.  For JWTs, while claim names are
	strings, claim values can be any JSON type.  Both token types
	offer cryptographic protection of their content: SWTs with
	HMAC SHA-256 and JWTs with a choice of algorithms, including
	signature, MAC, and encryption algorithms.
      </t>

    </section>

    <section title="Acknowledgements" anchor="Acknowledgements">

      <t>
	The authors acknowledge that the design of JWTs was
	intentionally influenced by the design and simplicity of <xref
	target="SWT">Simple Web Tokens</xref> and ideas for JSON
	tokens that Dick Hardt discussed within the OpenID community.
      </t>
      <t>
	Solutions for signing JSON content were previously explored by
	<xref target="MagicSignatures">Magic Signatures</xref>, <xref
	target="JSS">JSON Simple Sign</xref>, and <xref
	target="CanvasApp">Canvas Applications</xref>, all of which
	influenced this draft.
      </t>
      <t>
        This specification is the work of the OAuth Working Group,
	which includes dozens of active and dedicated participants.
	In particular, the following individuals contributed ideas,
        feedback, and wording that influenced this specification:
      </t>
      <t>
	Dirk Balfanz,
	Richard Barnes,
	Brian Campbell,
	Breno de Medeiros,
	Dick Hardt,
	Joe Hildebrand,
	Jeff Hodges,
	Edmund Jay,
	Yaron Y. Goland,
	Ben Laurie,
	James Manger,
	Prateek Mishra,
	Tony Nadalin,
	Axel Nennker,
	John Panzer,
	Emmanuel Raviart,
	David Recordon,
	Eric Rescorla,
	Jim Schaad,
	Paul Tarjan,
	Hannes Tschofenig,
	and Sean Turner.
      </t>
      <t>
	Hannes Tschofenig and Derek Atkins chaired the OAuth working group and
	Sean Turner and Stephen Farrell served as Security area directors
	during the creation of this specification.
      </t>
    </section>

    <section title="Document History" anchor="History">
      <t>
	[[ to be removed by the RFC editor before publication as an RFC ]]
      </t>

      <t>
	-11
	<list style='symbols'>
	  <t>
	    Added a Nested JWT example.
	  </t>
	  <t>
	    Added <spanx style="verb">sub</spanx> to the list of Claims
	    registered for use as Header Parameter values when
	    an unencrypted representation is required in an encrypted JWT.
	  </t>
	</list>
      </t>

      <t>
	-10
	<list style='symbols'>
	  <t>
	    Allowed Claims to be replicated as Header Parameters in
	    encrypted JWTs as needed by applications that require
	    an unencrypted representation of specific Claims.
	  </t>
	</list>
      </t>

      <t>
	-09
	<list style='symbols'>
	  <t>
	    Clarified that the
	    <spanx style="verb">typ</spanx> header parameter is used
	    in an application-specific manner
	    and has no effect upon the JWT processing.
	  </t>
	  <t>
	    Stated that recipients MUST either reject JWTs with
	    duplicate Header Parameter Names
	    or with duplicate Claim Names
	    or use a JSON parser that returns only
	    the lexically last duplicate member name.
	  </t>
	</list>
      </t>

      <t>
	-08
	<list style='symbols'>
	  <t>
	    Tracked a change to how JWEs are computed
	    (which only affected the example encrypted JWT value).
	  </t>
	</list>
      </t>
      <t>
	-07
	<list style='symbols'>
	  <t>
	    Defined that the default action for claims that are not understood
	    is to ignore them unless otherwise specified by applications.
	  </t>
	  <t>
	    Changed from using the term "byte" to "octet" when referring to 8 bit values.
	  </t>
	  <t>
	    Tracked encryption computation changes in the JWE specification.
	  </t>
	</list>
      </t>
      <t>
	-06
	<list style='symbols'>
	  <t>
	    Changed the name of the <spanx style="verb">prn</spanx> claim
	    to <spanx style="verb">sub</spanx> (subject)
	    both to more closely align with SAML name usage
	    and to use a more intuitive name.
	  </t>
	  <t>
	    Allow JWTs to have multiple audiences.
	  </t>
	  <t>
	    Applied editorial improvements suggested by
	    Jeff Hodges, Prateek Mishra, and Hannes Tschofenig.
	    Many of these simplified the terminology used.
	  </t>
	  <t>
	    Explained why Nested JWTs should be signed and then encrypted.
	  </t>
	  <t>
	    Clarified statements of the form "This claim is OPTIONAL"
	    to "Use of this claim is OPTIONAL".
	  </t>
	  <t>
	    Referenced String Comparison Rules in JWS.
	  </t>
	  <t>
	    Added seriesInfo information to Internet Draft references.
	  </t>
	</list>
      </t>
      <t>
	-05
	<list style='symbols'>
	  <t>
	    Updated values for example AES CBC calculations.
	  </t>
	</list>
      </t>
      <t>
	-04
	<list style='symbols'>
	  <t>
	    Promoted Initialization Vector from being a header parameter to being a top-level JWE element.
	    This saves approximately 16 bytes in the compact serialization,
	    which is a significant savings for some use cases.
	    Promoting the Initialization Vector out of the header also avoids repeating
	    this shared value in the JSON serialization.
	  </t>
	  <t>
	    Applied changes made by the RFC Editor to RFC 6749's registry language
	    to this specification.
	  </t>
	  <t>
	    Reference RFC 6755 -- An IETF URN Sub-Namespace for OAuth.
	  </t>
	</list>
      </t>
      <t>
	-03
	<list style='symbols'>
	  <t>
	    Added statement that
	    "StringOrURI values are compared as case-sensitive strings
	    with no transformations or canonicalizations applied".
	  </t>
	  <t>
	    Indented artwork elements to better distinguish them from the body text.
	  </t>
	</list>
      </t>
      <t>
	-02
	<list style='symbols'>
	  <t>
	    Added an example of an encrypted JWT.
	  </t>
	  <t>
	    Added this language to Registration Templates:
	    "This name is case sensitive.  Names that match other registered names
	    in a case insensitive manner SHOULD NOT be accepted."
	  </t>
	  <t>
	    Applied editorial suggestions.
	  </t>
	</list>
      </t>
      <t>
        -01
        <list style='symbols'>
	  <t>
	    Added the <spanx style="verb">cty</spanx> (content type) header parameter
	    for declaring type information about the secured content,
	    as opposed to the <spanx style="verb">typ</spanx> (type) header parameter,
	    which declares type information about this object.
	    This significantly simplified nested JWTs.
	  </t>
	  <t>
	    Moved description of how to determine whether a header is
	    for a JWS or a JWE from the JWT spec to the JWE spec.
	  </t>
          <t>
	    Changed registration requirements from RFC Required to
	    Specification Required with Expert Review.
	  </t>
	  <t>
	    Added Registration Template sections for defined registries.
	  </t>
	  <t>
	    Added Registry Contents sections to populate registry values.
	  </t>
	  <t>
	    Added "Collision Resistant Namespace" to the terminology section.
	  </t>
	  <t>
	    Numerous editorial improvements.
	  </t>
        </list>
      </t>
      <t>
        -00
        <list style='symbols'>
          <t>
            Created the initial IETF draft based upon
            draft-jones-json-web-token-10 with no normative
            changes.
          </t>
        </list>
      </t>
    </section>     

  </back>
</rfc>
